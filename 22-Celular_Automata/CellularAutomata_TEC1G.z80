; Celular Automata for the Z80
; ----------------------------
; TEC-1G Mon3 Version for the GLCD Add-On
; ---------------------------------------
; Code written by Brian Chiha
;
; In mathematics and computability theory, an elementary cellular
; automaton is a one-dimensional cellular automaton where there are 
; two possible states (labeled 0 and 1) and the rule to determine
; the state of a cell in the next generation depends only on the
; current state of the cell and its two immediate neighbors.
; 
; Consider a one dimensional array where each cell can contain only
; two values, 1 or 0.  A cell in a one dimentional arrays will have 
; two neighbors.  One to the left and one to the right.  Considering
; the three cells with either 1 or 0 states, there are 2^3 or 8
; different combinations.  The combination are:
;
;           111, 110, 101, 100, 011, 010, 001, 000
;  RULE 6C   0    1    1    0    1    1    0    0
;
; For the next generation of cells, a rule can be applied based on
; one of the 8 combinations above.  If 6C is the rule, its bits 
; can represent the next generation.  IE: if the three cells are
; 011 then the next cell will be a 1.  And if the cells are 100,
; then the next cell will be a 0.  A rule can be from 0 to 255.
;
; Finally, if the first one dimentional array has all values set 
; to 0 except its center cell set to 1.  When the rule is applied 
; for each generation, patterns emerge.

; LCD Graphics Library Functions used		
G_INIT_LCD:     EQU 0
G_SET_GR_MODE:  EQU 4
G_DRAW_PIXEL:   EQU 9
G_PLOT_TO_LCD:  EQU 12
; Mon3 API Calls
M_CONV_A_SEG: EQU 4
M_SCAN_KEY_WAIT: EQU 17

; Constants
C_MAX_X:    EQU 128
C_MAX_Y:    EQU 64

; RAM Variables
START_ADR:  EQU 4000H   ;Start location of code

RULE:       EQU START_ADR + 00FFH   ;Rule value 0-255
CELLS_CUR:  EQU START_ADR + 0100H   ;Current generation (128 bytes)
CELLS_NXT:  EQU START_ADR + 0180H   ;Next generation

        ORG START_ADR       ;Start Location

INIT:
        LD A,96H        ;Start Rule (Had to pick one!)
        LD (RULE),A     ;Save the Rule
        ;Set up Graphics LCD
        LD A,G_INIT_LCD ;Initialise GLCD
        RST 18H
        LD A,G_SET_GR_MODE  ;Set to Graphics Mode
        RST 18H
START:
        ;Initialise the first row of cells to 0
        LD HL,CELLS_CUR     ;Set first cell to 0
        LD DE,CELLS_CUR+1   ;And use LDIR to copy
        XOR A               ;the first cell to the
        LD (HL),A           ;next, 127 times
        LD BC,C_MAX_X-1
        LDIR
        ;Set the middle cell (or near to it), to 1
        LD A,1          
        LD (CELLS_CUR+C_MAX_X/2),A ;set cell to 1
        ;Set C to the first ROW which is 0
        LD C,00H
        ;Draw the 1-D array to the current ROM
DRAW_CELLS:
        LD A,C          ;Get current ROW
        CP C_MAX_Y      ;Is it at the last row?
        JR Z,FINISH     ;Yes, jump to finish
        LD DE,CELLS_CUR ;No, then set DE to current cells array
        LD B,00H        ;Set COLUMN to 0
NEW_COLUMN:
        LD A,(DE)       ;Get value stored in array
        CP 1            ;Is current cell a 1?
        JR NZ,SKIP_DRAW ;No, skip drawing a pixel
        LD A,G_DRAW_PIXEL   ;Draw pixel at Column/Row
        RST 18H             ;Draw Pixel at (B,C)
SKIP_DRAW:
        INC DE          ;Move to next cell
        INC B           ;Increment COLUMN position
        LD A,B          ;Get new COLUMN
        CP C_MAX_X      ;Is it the last column?
        JR NZ,NEW_COLUMN ;No, display next cell
        ;Calculate the next generation based on the three
        ;cells and the Rule.  Current Cell is an aligned table
        ;which makes it much easier to use.
CALC_NEXT:
        PUSH BC
        LD HL,CELLS_CUR ;Point to start of cells array
        LD DE,CELLS_NXT ;Load DE with Next Generation array
        LD B,C_MAX_X    ;128 cells to calculate
NEXT_CELL:
        DEC L           ;Move L back two bytes to 
        DEC L           ;look at HL-1 first
        ;get HL-1
        CALL GET_CELL   ;Get value in cell at "cell-1"
        ADD A,A         ;Multiply by 4
        ADD A,A
        LD C,A          ;Save counter in C
        ;get HL
        CALL GET_CELL   ;Get value in cell at "cell"
        ADD A,A         ;Multiply by 2
        ADD A,C
        LD C,A          ;Add value to counter
        ;get HL+1
        CALL GET_CELL   ;Get value in cell at "cell+1"
        ADD A,C
        LD C,A          ;Add value to counter
        ;C now stores the bit in the rule to use. 0-7
        LD A,(RULE)     ;Get the rule
        INC C           ;Increment C to adjust for rotation loop
ROT_LOOP:               ;Put bit needed in Bit 0
        DEC C           ;Decrease counter
        JR Z,ROT_DONE   ;if its zero, no more to do
        RRCA            ;Rotate bits in rule to the right by 1
        JR ROT_LOOP     ;loop again until counter=0
ROT_DONE:
        AND 01H         ;Mask out all bits except Bit 0
        LD (DE),A       ;Save value to Next Generation
        INC DE          ;Move to next next generation cell
        DJNZ NEXT_CELL  ;Repeat for 128 cells
        ;Copy completed next generation cells to current cells
COPY_CELLS:
        LD DE,CELLS_CUR ;Use LDIR to copy 128 bytes from next
        LD HL,CELLS_NXT ;to current cells array
        LD BC,C_MAX_X
        LDIR
        POP BC
        INC C           ;move to next ROW
        JR DRAW_CELLS   ;repeate until all generations done
        ;All pixels are plotted.  Display then to the GCLD and
        ;handle keypad input to select a new rule
FINISH:
        LD A,G_PLOT_TO_LCD  ;Plot Graphics buffer to GLCD
        RST 18H
        ;Display rule on 7segment display
        LD A,(RULE)     ;Get current rule
        LD C,M_CONV_A_SEG   ;convert register A to seven segment values
        LD DE,DISPLAY+4 ;Add then to the last two segments
        RST 10H
        ;Display rule and check for key input
DISP_LOOP:
        LD DE,DISPLAY
        RST 20H     ;Multiplex 7segement and check for key press
        JR NZ,DISP_LOOP ;Loop if no key pressed
        ;Key is pressed, check for Plus/Minus or other
PLUS:
        CP 10H          ;Is it a plus key?
        JR NZ,MINUS     ;No, check for minus
        LD HL,RULE      ;Get rule and increment it
        INC (HL)
        JP START        ;Jump to start and display new rule
MINUS:
        CP 11H          ;is it a minus key?
        RET NZ          ;No, then exit the program
        LD HL,RULE      ;Get rule and decrement it
        DEC (HL)
        JP START        ;Jump to start and display new rule

        ;Get the cell value at HL+1 and adjust for boundry cells
GET_CELL:
        INC L           ;increment L
        RES 7,L         ;remove bit 7 to wrap around if overflow
        LD A,(HL)       ;Get value from HL
        RET

        ;Display buffer with seven segment values for the word RULE
DISPLAY:
        .db 4BH,0EAH,0C2H,0C7H,00H,00H ;"RULE  "
        ;last two bytes will be updated above.
